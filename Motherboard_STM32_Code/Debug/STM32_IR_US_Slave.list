
STM32_IR_US_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004684  08004684  00005684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080046c8  080046c8  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c8  080046c8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046cc  080046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  080046e0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080046e0  00006174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea70  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d6  00000000  00000000  00014aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00016f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4b  00000000  00000000  00017df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001784a  00000000  00000000  00018943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e3f  00000000  00000000  0003018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008864d  00000000  00000000  00040fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  000c965c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000cd358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800466c 	.word	0x0800466c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800466c 	.word	0x0800466c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b50      	ldr	r3, [pc, #320]	@ (8000a84 <MX_GPIO_Init+0x158>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a4f      	ldr	r2, [pc, #316]	@ (8000a84 <MX_GPIO_Init+0x158>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <MX_GPIO_Init+0x158>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b4a      	ldr	r3, [pc, #296]	@ (8000a84 <MX_GPIO_Init+0x158>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a49      	ldr	r2, [pc, #292]	@ (8000a84 <MX_GPIO_Init+0x158>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b47      	ldr	r3, [pc, #284]	@ (8000a84 <MX_GPIO_Init+0x158>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b44      	ldr	r3, [pc, #272]	@ (8000a84 <MX_GPIO_Init+0x158>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a43      	ldr	r2, [pc, #268]	@ (8000a84 <MX_GPIO_Init+0x158>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b41      	ldr	r3, [pc, #260]	@ (8000a84 <MX_GPIO_Init+0x158>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b3e      	ldr	r3, [pc, #248]	@ (8000a84 <MX_GPIO_Init+0x158>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a84 <MX_GPIO_Init+0x158>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b3b      	ldr	r3, [pc, #236]	@ (8000a84 <MX_GPIO_Init+0x158>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WK_LED_GPIO_Port, WK_LED_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a6:	4838      	ldr	r0, [pc, #224]	@ (8000a88 <MX_GPIO_Init+0x15c>)
 80009a8:	f001 f9a3 	bl	8001cf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	4836      	ldr	r0, [pc, #216]	@ (8000a8c <MX_GPIO_Init+0x160>)
 80009b2:	f001 f99e 	bl	8001cf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IRSensorEnable_GPIO_Port, IRSensorEnable_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	4835      	ldr	r0, [pc, #212]	@ (8000a90 <MX_GPIO_Init+0x164>)
 80009bc:	f001 f999 	bl	8001cf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_LED_Pin;
 80009c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WK_LED_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	482b      	ldr	r0, [pc, #172]	@ (8000a88 <MX_GPIO_Init+0x15c>)
 80009da:	f000 ffef 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = voltageTest_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(voltageTest_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	4826      	ldr	r0, [pc, #152]	@ (8000a8c <MX_GPIO_Init+0x160>)
 80009f2:	f000 ffe3 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 80009f6:	2308      	movs	r3, #8
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481f      	ldr	r0, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0x160>)
 8000a0e:	f000 ffd5 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPISelect_Pin;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPISelect_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0x164>)
 8000a28:	f000 ffc8 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IR4Output_Pin|IR1Output_Pin;
 8000a2c:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4812      	ldr	r0, [pc, #72]	@ (8000a8c <MX_GPIO_Init+0x160>)
 8000a42:	f000 ffbb 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRSensorEnable_Pin;
 8000a46:	2308      	movs	r3, #8
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRSensorEnable_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_GPIO_Init+0x164>)
 8000a5e:	f000 ffad 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IR3Output_Pin|IR2Output_Pin;
 8000a62:	2330      	movs	r3, #48	@ 0x30
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <MX_GPIO_Init+0x164>)
 8000a76:	f000 ffa1 	bl	80019bc <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40011000 	.word	0x40011000
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	GPIO_TypeDef* IRGPIOPorts[4] = {
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <main+0x60>)
 8000a9c:	f107 0408 	add.w	r4, r7, #8
 8000aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			IR2Output_GPIO_Port,
			IR3Output_GPIO_Port,
			IR4Output_GPIO_Port,
	};

	uint16_t IRGPIOPins[4] = {
 8000aa6:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <main+0x64>)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aae:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fcd3 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f827 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff ff37 	bl	800092c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000abe:	f000 fc1f 	bl	8001300 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000ac2:	f000 f91f 	bl	8000d04 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000ac6:	f000 fb05 	bl	80010d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000aca:	f000 fb5d 	bl	8001188 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Transmit_DMA(&hspi2, dataToRasp, 4);
 8000ace:	2204      	movs	r2, #4
 8000ad0:	490a      	ldr	r1, [pc, #40]	@ (8000afc <main+0x68>)
 8000ad2:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x6c>)
 8000ad4:	f001 fdba 	bl	800264c <HAL_SPI_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  IRStartDetect(IRGPIOPorts, IRGPIOPins);
 8000ad8:	463a      	mov	r2, r7
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f857 	bl	8000b94 <IRStartDetect>
	  dataToRasp[1] = IRObjectDetected;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <main+0x70>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <main+0x68>)
 8000aec:	705a      	strb	r2, [r3, #1]
	  IRStartDetect(IRGPIOPorts, IRGPIOPins);
 8000aee:	bf00      	nop
 8000af0:	e7f2      	b.n	8000ad8 <main+0x44>
 8000af2:	bf00      	nop
 8000af4:	08004684 	.word	0x08004684
 8000af8:	08004694 	.word	0x08004694
 8000afc:	20000038 	.word	0x20000038
 8000b00:	20000040 	.word	0x20000040
 8000b04:	2000003c 	.word	0x2000003c

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	@ 0x40
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2228      	movs	r2, #40	@ 0x28
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fd7c 	bl	8004614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b46:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 f8e7 	bl	8001d24 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f8cc 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fb54 	bl	8002228 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b86:	f000 f8b7 	bl	8000cf8 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3740      	adds	r7, #64	@ 0x40
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <IRStartDetect>:

/* USER CODE BEGIN 4 */
// Function for IR sensors detection.
void IRStartDetect(GPIO_TypeDef* GPIOPort[4], uint16_t GPIOPin[4])
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	if(IRIsEnabled)
 8000b9e:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <IRStartDetect+0xe4>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d064      	beq.n	8000c70 <IRStartDetect+0xdc>
	{
		IRIsEnabled = 0;
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <IRStartDetect+0xe4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
		// Eliminate jitter.
		Delay_us(210);
 8000bac:	20d2      	movs	r0, #210	@ 0xd2
 8000bae:	f000 f869 	bl	8000c84 <Delay_us>

		for(int i = 0; i < 4; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e053      	b.n	8000c60 <IRStartDetect+0xcc>
		{
			if(HAL_GPIO_ReadPin(GPIOPort[i], GPIOPin[i]))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f001 f879 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00f      	beq.n	8000bf8 <IRStartDetect+0x64>
			{
				IRObjectDetected &= ~(1 << i);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <IRStartDetect+0xe8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <IRStartDetect+0xe8>)
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e030      	b.n	8000c5a <IRStartDetect+0xc6>
			}
			else
			{
				// Eliminate jitter twice.
				Delay_us(400);
 8000bf8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000bfc:	f000 f842 	bl	8000c84 <Delay_us>
				if(HAL_GPIO_ReadPin(GPIOPort[i], GPIOPin[i]))
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f001 f855 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00f      	beq.n	8000c40 <IRStartDetect+0xac>
				{
					IRObjectDetected &= ~(1 << i);
 8000c20:	2201      	movs	r2, #1
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <IRStartDetect+0xe8>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	4013      	ands	r3, r2
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <IRStartDetect+0xe8>)
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e00c      	b.n	8000c5a <IRStartDetect+0xc6>
				}
				else
				{
					IRObjectDetected |= (1 << i);
 8000c40:	2201      	movs	r2, #1
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	b25a      	sxtb	r2, r3
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <IRStartDetect+0xe8>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <IRStartDetect+0xe8>)
 8000c58:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 4; i++)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	dda8      	ble.n	8000bb8 <IRStartDetect+0x24>
				}
			}
		}
		// Reset enable pin.
		HAL_GPIO_WritePin(IRSensorEnable_GPIO_Port, IRSensorEnable_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <IRStartDetect+0xec>)
 8000c6c:	f001 f841 	bl	8001cf2 <HAL_GPIO_WritePin>
	}
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000034 	.word	0x20000034
 8000c7c:	2000003c 	.word	0x2000003c
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <Delay_us>:

// us level timer.
void Delay_us(uint16_t myus)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 0xffff-myus-5;
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000c94:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000c98:	33fa      	adds	r3, #250	@ 0xfa
 8000c9a:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_Base_Start(&htim3);
 8000c9c:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <Delay_us+0x48>)
 8000c9e:	f002 f803 	bl	8002ca8 <HAL_TIM_Base_Start>
	__HAL_TIM_SetCounter(&htim3,differ);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <Delay_us+0x48>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	89fa      	ldrh	r2, [r7, #14]
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(differ < 0xffff-5)
 8000caa:	e003      	b.n	8000cb4 <Delay_us+0x30>
	{
		differ = __HAL_TIM_GetCounter(&htim3);
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <Delay_us+0x48>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb2:	81fb      	strh	r3, [r7, #14]
	while(differ < 0xffff-5)
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	f64f 72f9 	movw	r2, #65529	@ 0xfff9
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d9f6      	bls.n	8000cac <Delay_us+0x28>
	}
	HAL_TIM_Base_Stop(&htim3);
 8000cbe:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <Delay_us+0x48>)
 8000cc0:	f002 f83c 	bl	8002d3c <HAL_TIM_Base_Stop>
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000098 	.word	0x20000098

08000cd0 <Send_Trig>:

// Trigger ultrasonic sensor.
void Send_Trig(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <Send_Trig+0x24>)
 8000cda:	f001 f80a 	bl	8001cf2 <HAL_GPIO_WritePin>
	Delay_us(20);
 8000cde:	2014      	movs	r0, #20
 8000ce0:	f7ff ffd0 	bl	8000c84 <Delay_us>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <Send_Trig+0x24>)
 8000cea:	f001 f802 	bl	8001cf2 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d0a:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <MX_SPI2_Init+0x60>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d32:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d48:	220a      	movs	r2, #10
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_SPI2_Init+0x5c>)
 8000d4e:	f001 fbf9 	bl	8002544 <HAL_SPI_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000d58:	f7ff ffce 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000040 	.word	0x20000040
 8000d64:	40003800 	.word	0x40003800

08000d68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a20      	ldr	r2, [pc, #128]	@ (8000e04 <HAL_SPI_MspInit+0x9c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d139      	bne.n	8000dfc <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_SPI_MspInit+0xa0>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <HAL_SPI_MspInit+0xa0>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d92:	61d3      	str	r3, [r2, #28]
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_SPI_MspInit+0xa0>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0xa0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <HAL_SPI_MspInit+0xa0>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_SPI_MspInit+0xa0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000db8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480f      	ldr	r0, [pc, #60]	@ (8000e0c <HAL_SPI_MspInit+0xa4>)
 8000dce:	f000 fdf5 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <HAL_SPI_MspInit+0xa4>)
 8000de8:	f000 fde8 	bl	80019bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2024      	movs	r0, #36	@ 0x24
 8000df2:	f000 fc6c 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000df6:	2024      	movs	r0, #36	@ 0x24
 8000df8:	f000 fc85 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40003800 	.word	0x40003800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010c00 	.word	0x40010c00

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_MspInit+0x60>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_MspInit+0x60>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <NMI_Handler+0x4>

08000e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 fb10 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM3_IRQHandler+0x10>)
 8000ed2:	f002 f907 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000098 	.word	0x20000098

08000ee0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <TIM4_IRQHandler+0x10>)
 8000ee6:	f002 f8fd 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000e0 	.word	0x200000e0

08000ef4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <SPI2_IRQHandler+0x10>)
 8000efa:	f001 fc59 	bl	80027b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000040 	.word	0x20000040

08000f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <USART1_IRQHandler+0x10>)
 8000f0e:	f002 fe9f 	bl	8003c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000128 	.word	0x20000128

08000f1c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 1 */
// Callback function of HAL_SPI_Transmit_DMA.
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_SPI_TxCpltCallback+0x24>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d104      	bne.n	8000f36 <HAL_SPI_TxCpltCallback+0x1a>
	{
		HAL_SPI_Transmit_DMA(&hspi2, dataToRasp,4);
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4905      	ldr	r1, [pc, #20]	@ (8000f44 <HAL_SPI_TxCpltCallback+0x28>)
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <HAL_SPI_TxCpltCallback+0x24>)
 8000f32:	f001 fb8b 	bl	800264c <HAL_SPI_Transmit_DMA>
	}

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000040 	.word	0x20000040
 8000f44:	20000038 	.word	0x20000038

08000f48 <HAL_TIM_IC_CaptureCallback>:

// Callback function of timers capture.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a39      	ldr	r2, [pc, #228]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d167      	bne.n	8001028 <HAL_TIM_IC_CaptureCallback+0xe0>
	{
		switch(polarity)
 8000f58:	4b38      	ldr	r3, [pc, #224]	@ (800103c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d002      	beq.n	8000f66 <HAL_TIM_IC_CaptureCallback+0x1e>
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d01f      	beq.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0x5c>
				  polarity = PO_Rising;
				  break;
			  }
		}
	}
}
 8000f64:	e060      	b.n	8001028 <HAL_TIM_IC_CaptureCallback+0xe0>
				  Period_Num = 0;
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
				  Capture_Value1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4832      	ldr	r0, [pc, #200]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f70:	f002 fb24 	bl	80035bc <HAL_TIM_ReadCapturedValue>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b32      	ldr	r3, [pc, #200]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000f7a:	801a      	strh	r2, [r3, #0]
				  __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020a 	bic.w	r2, r2, #10
 8000f8a:	621a      	str	r2, [r3, #32]
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a1a      	ldr	r2, [r3, #32]
 8000f92:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0202 	orr.w	r2, r2, #2
 8000f9a:	621a      	str	r2, [r3, #32]
				  polarity = PO_Falling;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	@ (800103c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
				  break;
 8000fa2:	e041      	b.n	8001028 <HAL_TIM_IC_CaptureCallback+0xe0>
				  Capture_Value2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4824      	ldr	r0, [pc, #144]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000fa8:	f002 fb08 	bl	80035bc <HAL_TIM_ReadCapturedValue>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fb2:	801a      	strh	r2, [r3, #0]
				  Distance_Value = (Capture_Value2 + Period_Num * 65536 - Capture_Value1) / 5.88;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a20      	ldr	r2, [pc, #128]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000fc4:	8812      	ldrh	r2, [r2, #0]
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa13 	bl	80003f4 <__aeabi_i2d>
 8000fce:	a318      	add	r3, pc, #96	@ (adr r3, 8001030 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff fba2 	bl	800071c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fc84 	bl	80008ec <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000fea:	801a      	strh	r2, [r3, #0]
				  dataToRasp[2] = (Distance_Value >> 8) & 0xFF;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000ff8:	709a      	strb	r2, [r3, #2]
				  dataToRasp[3] = Distance_Value & 0xFF;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001002:	70da      	strb	r2, [r3, #3]
				  __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020a 	bic.w	r2, r2, #10
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a12      	ldr	r2, [r2, #32]
 800101e:	621a      	str	r2, [r3, #32]
				  polarity = PO_Rising;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
				  break;
 8001026:	bf00      	nop
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	b851eb85 	.word	0xb851eb85
 8001034:	4017851e 	.word	0x4017851e
 8001038:	20000098 	.word	0x20000098
 800103c:	20000000 	.word	0x20000000
 8001040:	20000032 	.word	0x20000032
 8001044:	2000002c 	.word	0x2000002c
 8001048:	2000002e 	.word	0x2000002e
 800104c:	20000030 	.word	0x20000030
 8001050:	20000038 	.word	0x20000038

08001054 <HAL_TIM_PeriodElapsedCallback>:

// Callback function of timer elapsed.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

	if(htim == &htim3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d106      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		Period_Num++;
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800106e:	801a      	strh	r2, [r3, #0]
			Send_Trig();
		}
		HAL_GPIO_WritePin(IRSensorEnable_GPIO_Port, IRSensorEnable_Pin, SET);
		IRIsEnabled = 1;
	}
}
 8001070:	e01a      	b.n	80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>
	else if (htim == &htim4)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d116      	bne.n	80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>
		prescale10HzCount++;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001084:	701a      	strb	r2, [r3, #0]
		if (prescale10HzCount == 100)
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b64      	cmp	r3, #100	@ 0x64
 800108c:	d104      	bne.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x44>
			prescale10HzCount = 0;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
			Send_Trig();
 8001094:	f7ff fe1c 	bl	8000cd0 <Send_Trig>
		HAL_GPIO_WritePin(IRSensorEnable_GPIO_Port, IRSensorEnable_Pin, SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2108      	movs	r1, #8
 800109c:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800109e:	f000 fe28 	bl	8001cf2 <HAL_GPIO_WritePin>
		IRIsEnabled = 1;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000098 	.word	0x20000098
 80010b4:	20000032 	.word	0x20000032
 80010b8:	200000e0 	.word	0x200000e0
 80010bc:	20000035 	.word	0x20000035
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	20000034 	.word	0x20000034

080010c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <MX_TIM3_Init+0xac>)
 80010f2:	4a24      	ldr	r2, [pc, #144]	@ (8001184 <MX_TIM3_Init+0xb0>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_TIM3_Init+0xac>)
 80010f8:	2247      	movs	r2, #71	@ 0x47
 80010fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <MX_TIM3_Init+0xac>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001102:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_TIM3_Init+0xac>)
 8001104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001108:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_TIM3_Init+0xac>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_TIM3_Init+0xac>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001116:	481a      	ldr	r0, [pc, #104]	@ (8001180 <MX_TIM3_Init+0xac>)
 8001118:	f001 fe88 	bl	8002e2c <HAL_TIM_IC_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001122:	f7ff fde9 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4619      	mov	r1, r3
 8001134:	4812      	ldr	r0, [pc, #72]	@ (8001180 <MX_TIM3_Init+0xac>)
 8001136:	f002 fccb 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001140:	f7ff fdda 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001148:	2301      	movs	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4809      	ldr	r0, [pc, #36]	@ (8001180 <MX_TIM3_Init+0xac>)
 800115c:	f002 f8ca 	bl	80032f4 <HAL_TIM_IC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001166:	f7ff fdc7 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800116a:	2100      	movs	r1, #0
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_TIM3_Init+0xac>)
 800116e:	f001 fead 	bl	8002ecc <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM3_Init+0xac>)
 8001174:	f001 fe08 	bl	8002d88 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000098 	.word	0x20000098
 8001184:	40000400 	.word	0x40000400

08001188 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <MX_TIM4_Init+0x9c>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011ac:	2247      	movs	r2, #71	@ 0x47
 80011ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011ca:	4815      	ldr	r0, [pc, #84]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011cc:	f001 fd1c 	bl	8002c08 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011d6:	f7ff fd8f 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	480e      	ldr	r0, [pc, #56]	@ (8001220 <MX_TIM4_Init+0x98>)
 80011e8:	f002 f920 	bl	800342c <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f7ff fd81 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	@ (8001220 <MX_TIM4_Init+0x98>)
 8001204:	f002 fc64 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800120e:	f7ff fd73 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <MX_TIM4_Init+0x98>)
 8001214:	f001 fdb8 	bl	8002d88 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM4_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200000e0 	.word	0x200000e0
 8001224:	40000800 	.word	0x40000800

08001228 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_TIM_IC_MspInit+0x80>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d12b      	bne.n	80012a0 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_TIM_IC_MspInit+0x84>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_TIM_IC_MspInit+0x84>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	61d3      	str	r3, [r2, #28]
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_TIM_IC_MspInit+0x84>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_TIM_IC_MspInit+0x84>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a11      	ldr	r2, [pc, #68]	@ (80012ac <HAL_TIM_IC_MspInit+0x84>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_TIM_IC_MspInit+0x84>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <HAL_TIM_IC_MspInit+0x88>)
 800128c:	f000 fb96 	bl	80019bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2103      	movs	r1, #3
 8001294:	201d      	movs	r0, #29
 8001296:	f000 fa1a 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800129a:	201d      	movs	r0, #29
 800129c:	f000 fa33 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40000400 	.word	0x40000400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010800 	.word	0x40010800

080012b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d113      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0c      	ldr	r2, [pc, #48]	@ (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2104      	movs	r1, #4
 80012e2:	201e      	movs	r0, #30
 80012e4:	f000 f9f3 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012e8:	201e      	movs	r0, #30
 80012ea:	f000 fa0c 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40000800 	.word	0x40000800
 80012fc:	40021000 	.word	0x40021000

08001300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <MX_USART1_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001338:	f002 fc3a 	bl	8003bb0 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f7ff fcd9 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000128 	.word	0x20000128
 8001350:	40013800 	.word	0x40013800

08001354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a24      	ldr	r2, [pc, #144]	@ (8001400 <HAL_UART_MspInit+0xac>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d141      	bne.n	80013f8 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <HAL_UART_MspInit+0xb0>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <HAL_UART_MspInit+0xb0>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <HAL_UART_MspInit+0xb0>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <HAL_UART_MspInit+0xb0>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <HAL_UART_MspInit+0xb0>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_UART_MspInit+0xb0>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <HAL_UART_MspInit+0xb4>)
 80013ba:	f000 faff 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <HAL_UART_MspInit+0xb4>)
 80013d4:	f000 faf2 	bl	80019bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2106      	movs	r1, #6
 80013dc:	2025      	movs	r0, #37	@ 0x25
 80013de:	f000 f976 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013e2:	2025      	movs	r0, #37	@ 0x25
 80013e4:	f000 f98f 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_UART_MspInit+0xb8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_UART_MspInit+0xb8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0220 	orr.w	r2, r2, #32
 80013f6:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013800 	.word	0x40013800
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800
 800140c:	20000128 	.word	0x20000128

08001410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001410:	f7ff fe5a 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	@ (8001444 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001416:	490c      	ldr	r1, [pc, #48]	@ (8001448 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001418:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <LoopFillZerobss+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a09      	ldr	r2, [pc, #36]	@ (8001450 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800142c:	4c09      	ldr	r4, [pc, #36]	@ (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143a:	f003 f8f3 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143e:	f7ff fb29 	bl	8000a94 <main>
  bx lr
 8001442:	4770      	bx	lr
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800144c:	080046d0 	.word	0x080046d0
  ldr r2, =_sbss
 8001450:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001454:	20000174 	.word	0x20000174

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_Init+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_Init+0x28>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f923 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fcca 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40022000 	.word	0x40022000

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f93b 	bl	8001722 <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f903 	bl	80016ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_IncTick+0x1c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_IncTick+0x20>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a03      	ldr	r2, [pc, #12]	@ (8001508 <HAL_IncTick+0x20>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000170 	.word	0x20000170

0800150c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b02      	ldr	r3, [pc, #8]	@ (800151c <HAL_GetTick+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000170 	.word	0x20000170

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4906      	ldr	r1, [pc, #24]	@ (80015b8 <__NVIC_EnableIRQ+0x34>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	@ (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff90 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff2d 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff42 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff35 	bl	8001584 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa2 	bl	8001674 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_DMA_Start_IT+0x20>
 8001756:	2302      	movs	r3, #2
 8001758:	e04b      	b.n	80017f2 <HAL_DMA_Start_IT+0xb8>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d13a      	bne.n	80017e4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2202      	movs	r2, #2
 8001772:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f8e4 	bl	8001960 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 020e 	orr.w	r2, r2, #14
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e00f      	b.n	80017d2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0204 	bic.w	r2, r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 020a 	orr.w	r2, r2, #10
 80017d0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e005      	b.n	80017f0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
 80017ee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d008      	beq.n	8001824 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e020      	b.n	8001866 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 020e 	bic.w	r2, r2, #14
 8001832:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d005      	beq.n	8001894 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2204      	movs	r2, #4
 800188c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e051      	b.n	8001938 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020e 	bic.w	r2, r2, #14
 80018a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <HAL_DMA_Abort_IT+0xd4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d029      	beq.n	8001912 <HAL_DMA_Abort_IT+0xa2>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <HAL_DMA_Abort_IT+0xd8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d022      	beq.n	800190e <HAL_DMA_Abort_IT+0x9e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1f      	ldr	r2, [pc, #124]	@ (800194c <HAL_DMA_Abort_IT+0xdc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01a      	beq.n	8001908 <HAL_DMA_Abort_IT+0x98>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001950 <HAL_DMA_Abort_IT+0xe0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d012      	beq.n	8001902 <HAL_DMA_Abort_IT+0x92>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <HAL_DMA_Abort_IT+0xe4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00a      	beq.n	80018fc <HAL_DMA_Abort_IT+0x8c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <HAL_DMA_Abort_IT+0xe8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <HAL_DMA_Abort_IT+0x86>
 80018f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018f4:	e00e      	b.n	8001914 <HAL_DMA_Abort_IT+0xa4>
 80018f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018fa:	e00b      	b.n	8001914 <HAL_DMA_Abort_IT+0xa4>
 80018fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001900:	e008      	b.n	8001914 <HAL_DMA_Abort_IT+0xa4>
 8001902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001906:	e005      	b.n	8001914 <HAL_DMA_Abort_IT+0xa4>
 8001908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800190c:	e002      	b.n	8001914 <HAL_DMA_Abort_IT+0xa4>
 800190e:	2310      	movs	r3, #16
 8001910:	e000      	b.n	8001914 <HAL_DMA_Abort_IT+0xa4>
 8001912:	2301      	movs	r3, #1
 8001914:	4a11      	ldr	r2, [pc, #68]	@ (800195c <HAL_DMA_Abort_IT+0xec>)
 8001916:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
    } 
  }
  return status;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020008 	.word	0x40020008
 8001948:	4002001c 	.word	0x4002001c
 800194c:	40020030 	.word	0x40020030
 8001950:	40020044 	.word	0x40020044
 8001954:	40020058 	.word	0x40020058
 8001958:	4002006c 	.word	0x4002006c
 800195c:	40020000 	.word	0x40020000

08001960 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d108      	bne.n	80019a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800199e:	e007      	b.n	80019b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	60da      	str	r2, [r3, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	@ 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e169      	b.n	8001ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8158 	bne.w	8001c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a9a      	ldr	r2, [pc, #616]	@ (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05e      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 80019f8:	4a98      	ldr	r2, [pc, #608]	@ (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d875      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 80019fe:	4a98      	ldr	r2, [pc, #608]	@ (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d058      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a04:	4a96      	ldr	r2, [pc, #600]	@ (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d86f      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a0a:	4a96      	ldr	r2, [pc, #600]	@ (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d052      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a10:	4a94      	ldr	r2, [pc, #592]	@ (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d869      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a16:	4a94      	ldr	r2, [pc, #592]	@ (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04c      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a92      	ldr	r2, [pc, #584]	@ (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d863      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a22:	4a92      	ldr	r2, [pc, #584]	@ (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d046      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a90      	ldr	r2, [pc, #576]	@ (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d85d      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d82a      	bhi.n	8001a88 <HAL_GPIO_Init+0xcc>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d859      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <HAL_GPIO_Init+0x80>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001aeb 	.word	0x08001aeb
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001aeb 	.word	0x08001aeb
 8001a58:	08001aeb 	.word	0x08001aeb
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001aeb 	.word	0x08001aeb
 8001a64:	08001aeb 	.word	0x08001aeb
 8001a68:	08001aeb 	.word	0x08001aeb
 8001a6c:	08001aeb 	.word	0x08001aeb
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001aeb 	.word	0x08001aeb
 8001a78:	08001aeb 	.word	0x08001aeb
 8001a7c:	08001aeb 	.word	0x08001aeb
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aad 	.word	0x08001aad
 8001a88:	4a79      	ldr	r2, [pc, #484]	@ (8001c70 <HAL_GPIO_Init+0x2b4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8e:	e02c      	b.n	8001aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e029      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e024      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e01f      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e01a      	b.n	8001aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e013      	b.n	8001aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	611a      	str	r2, [r3, #16]
          break;
 8001ad6:	e009      	b.n	8001aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	615a      	str	r2, [r3, #20]
          break;
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x130>
          break;
 8001aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	@ 0xff
 8001af0:	d801      	bhi.n	8001af6 <HAL_GPIO_Init+0x13a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_Init+0x13e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	@ 0xff
 8001b00:	d802      	bhi.n	8001b08 <HAL_GPIO_Init+0x14c>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x152>
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	210f      	movs	r1, #15
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80b1 	beq.w	8001c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	@ (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b54:	4a48      	ldr	r2, [pc, #288]	@ (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a40      	ldr	r2, [pc, #256]	@ (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_GPIO_Init+0x1ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3f      	ldr	r2, [pc, #252]	@ (8001c80 <HAL_GPIO_Init+0x2c4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c84 <HAL_GPIO_Init+0x2c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	@ (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bba:	492f      	ldr	r1, [pc, #188]	@ (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	492c      	ldr	r1, [pc, #176]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4928      	ldr	r1, [pc, #160]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4922      	ldr	r1, [pc, #136]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	491e      	ldr	r1, [pc, #120]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4918      	ldr	r1, [pc, #96]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4914      	ldr	r1, [pc, #80]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d021      	beq.n	8001c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	490e      	ldr	r1, [pc, #56]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e021      	b.n	8001c9e <HAL_GPIO_Init+0x2e2>
 8001c5a:	bf00      	nop
 8001c5c:	10320000 	.word	0x10320000
 8001c60:	10310000 	.word	0x10310000
 8001c64:	10220000 	.word	0x10220000
 8001c68:	10210000 	.word	0x10210000
 8001c6c:	10120000 	.word	0x10120000
 8001c70:	10110000 	.word	0x10110000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40011400 	.word	0x40011400
 8001c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4909      	ldr	r1, [pc, #36]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f47f ae8e 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	372c      	adds	r7, #44	@ 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	807b      	strh	r3, [r7, #2]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d02:	787b      	ldrb	r3, [r7, #1]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	041a      	lsls	r2, r3, #16
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	611a      	str	r2, [r3, #16]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e272      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8087 	beq.w	8001e52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4b92      	ldr	r3, [pc, #584]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d00c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d50:	4b8f      	ldr	r3, [pc, #572]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d112      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5e>
 8001d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d68:	d10b      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6a:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d06c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x12c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d168      	bne.n	8001e50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e24c      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x76>
 8001d8c:	4b80      	ldr	r3, [pc, #512]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a7f      	ldr	r2, [pc, #508]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e02e      	b.n	8001df8 <HAL_RCC_OscConfig+0xd4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b7b      	ldr	r3, [pc, #492]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7a      	ldr	r2, [pc, #488]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b78      	ldr	r3, [pc, #480]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a77      	ldr	r2, [pc, #476]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e01d      	b.n	8001df8 <HAL_RCC_OscConfig+0xd4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0xbc>
 8001dc6:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a71      	ldr	r2, [pc, #452]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6e      	ldr	r2, [pc, #440]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0xd4>
 8001de0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b68      	ldr	r3, [pc, #416]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a67      	ldr	r2, [pc, #412]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fb84 	bl	800150c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fb80 	bl	800150c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e200      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe4>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb70 	bl	800150c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fb6c 	bl	800150c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	@ 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1ec      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x10c>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e6a:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x18c>
 8001e76:	4b46      	ldr	r3, [pc, #280]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x176>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1c0      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4939      	ldr	r1, [pc, #228]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb25 	bl	800150c <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fb21 	bl	800150c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1a1      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4927      	ldr	r1, [pc, #156]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb04 	bl	800150c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fb00 	bl	800150c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e180      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d03a      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d019      	beq.n	8001f6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f40:	f7ff fae4 	bl	800150c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff fae0 	bl	800150c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e160      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f000 face 	bl	8002508 <RCC_Delay>
 8001f6c:	e01c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff faca 	bl	800150c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7a:	e00f      	b.n	8001f9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fac6 	bl	800150c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d908      	bls.n	8001f9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e146      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	42420000 	.word	0x42420000
 8001f98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b92      	ldr	r3, [pc, #584]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e9      	bne.n	8001f7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a6 	beq.w	8002102 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b8b      	ldr	r3, [pc, #556]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a87      	ldr	r2, [pc, #540]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b85      	ldr	r3, [pc, #532]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b82      	ldr	r3, [pc, #520]	@ (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b7f      	ldr	r3, [pc, #508]	@ (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fa87 	bl	800150c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7ff fa83 	bl	800150c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	@ 0x64
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e103      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b75      	ldr	r3, [pc, #468]	@ (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x312>
 8002028:	4b6f      	ldr	r3, [pc, #444]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a6e      	ldr	r2, [pc, #440]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e02d      	b.n	8002092 <HAL_RCC_OscConfig+0x36e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x334>
 800203e:	4b6a      	ldr	r3, [pc, #424]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a69      	ldr	r2, [pc, #420]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	4b67      	ldr	r3, [pc, #412]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a66      	ldr	r2, [pc, #408]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	e01c      	b.n	8002092 <HAL_RCC_OscConfig+0x36e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0x356>
 8002060:	4b61      	ldr	r3, [pc, #388]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a60      	ldr	r2, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	4b5e      	ldr	r3, [pc, #376]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a5d      	ldr	r2, [pc, #372]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e00b      	b.n	8002092 <HAL_RCC_OscConfig+0x36e>
 800207a:	4b5b      	ldr	r3, [pc, #364]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a5a      	ldr	r2, [pc, #360]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6213      	str	r3, [r2, #32]
 8002086:	4b58      	ldr	r3, [pc, #352]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a57      	ldr	r2, [pc, #348]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d015      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff fa37 	bl	800150c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fa33 	bl	800150c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0b1      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ee      	beq.n	80020a2 <HAL_RCC_OscConfig+0x37e>
 80020c4:	e014      	b.n	80020f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fa21 	bl	800150c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff fa1d 	bl	800150c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e09b      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	4b40      	ldr	r3, [pc, #256]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ee      	bne.n	80020ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b3c      	ldr	r3, [pc, #240]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a3b      	ldr	r2, [pc, #236]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210c:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d061      	beq.n	80021dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d146      	bne.n	80021ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff f9f1 	bl	800150c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7ff f9ed 	bl	800150c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e06d      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002140:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002154:	d108      	bne.n	8002168 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002156:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4921      	ldr	r1, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a19      	ldr	r1, [r3, #32]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	430b      	orrs	r3, r1
 800217a:	491b      	ldr	r1, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_OscConfig+0x4cc>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff f9c1 	bl	800150c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff f9bd 	bl	800150c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e03d      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x46a>
 80021ac:	e035      	b.n	800221a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_RCC_OscConfig+0x4cc>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff f9aa 	bl	800150c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f9a6 	bl	800150c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e026      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x498>
 80021da:	e01e      	b.n	800221a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e019      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCC_OscConfig+0x500>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	429a      	cmp	r2, r3
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0d0      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b6a      	ldr	r3, [pc, #424]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d910      	bls.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b67      	ldr	r3, [pc, #412]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 0207 	bic.w	r2, r3, #7
 8002252:	4965      	ldr	r1, [pc, #404]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800228e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a52      	ldr	r2, [pc, #328]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d040      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b41      	ldr	r3, [pc, #260]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e073      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06b      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b39      	ldr	r3, [pc, #228]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4936      	ldr	r1, [pc, #216]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff f8f8 	bl	800150c <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f8f4 	bl	800150c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e053      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d210      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4922      	ldr	r1, [pc, #136]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	@ (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	@ (80023f4 <HAL_RCC_ClockConfig+0x1cc>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_RCC_ClockConfig+0x1d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f856 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	0800469c 	.word	0x0800469c
 80023f4:	20000004 	.word	0x20000004
 80023f8:	20000008 	.word	0x20000008

080023fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002416:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x94>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x30>
 8002426:	2b08      	cmp	r3, #8
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x36>
 800242a:	e027      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x98>)
 800242e:	613b      	str	r3, [r7, #16]
      break;
 8002430:	e027      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	0c9b      	lsrs	r3, r3, #18
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x9c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x94>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c5b      	lsrs	r3, r3, #17
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	4a11      	ldr	r2, [pc, #68]	@ (800249c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0d      	ldr	r2, [pc, #52]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x98>)
 800245e:	fb03 f202 	mul.w	r2, r3, r2
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e004      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	613b      	str	r3, [r7, #16]
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x98>)
 800247e:	613b      	str	r3, [r7, #16]
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	693b      	ldr	r3, [r7, #16]
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	007a1200 	.word	0x007a1200
 8002498:	080046b4 	.word	0x080046b4
 800249c:	080046c4 	.word	0x080046c4
 80024a0:	003d0900 	.word	0x003d0900

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b02      	ldr	r3, [pc, #8]	@ (80024b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024bc:	f7ff fff2 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	080046ac 	.word	0x080046ac

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	@ (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	080046ac 	.word	0x080046ac

08002508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <RCC_Delay+0x34>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <RCC_Delay+0x38>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002524:	bf00      	nop
  }
  while (Delay --);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <RCC_Delay+0x1c>
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000004 	.word	0x20000004
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e076      	b.n	8002644 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	2b00      	cmp	r3, #0
 800255c:	d108      	bne.n	8002570 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002566:	d009      	beq.n	800257c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
 800256e:	e005      	b.n	800257c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fbe6 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	ea42 0103 	orr.w	r1, r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	0c1a      	lsrs	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f002 0204 	and.w	r2, r2, #4
 8002622:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002632:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_SPI_Transmit_DMA+0x20>
 8002668:	2302      	movs	r3, #2
 800266a:	e097      	b.n	800279c <HAL_SPI_Transmit_DMA+0x150>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002680:	2302      	movs	r3, #2
 8002682:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002684:	e085      	b.n	8002792 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_SPI_Transmit_DMA+0x46>
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002696:	e07c      	b.n	8002792 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2203      	movs	r2, #3
 800269c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026de:	d10f      	bne.n	8002700 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002704:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <HAL_SPI_Transmit_DMA+0x158>)
 8002706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270c:	4a26      	ldr	r2, [pc, #152]	@ (80027a8 <HAL_SPI_Transmit_DMA+0x15c>)
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002714:	4a25      	ldr	r2, [pc, #148]	@ (80027ac <HAL_SPI_Transmit_DMA+0x160>)
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271c:	2200      	movs	r2, #0
 800271e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4619      	mov	r1, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002736:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002738:	f7fe ffff 	bl	800173a <HAL_DMA_Start_IT>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002746:	f043 0210 	orr.w	r2, r3, #16
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002752:	e01e      	b.n	8002792 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275e:	2b40      	cmp	r3, #64	@ 0x40
 8002760:	d007      	beq.n	8002772 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0202 	orr.w	r2, r2, #2
 8002790:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	08002a37 	.word	0x08002a37
 80027a8:	08002991 	.word	0x08002991
 80027ac:	08002a53 	.word	0x08002a53

080027b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10e      	bne.n	80027f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
    return;
 80027ee:	e0b7      	b.n	8002960 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_SPI_IRQHandler+0x5e>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
    return;
 800280c:	e0a8      	b.n	8002960 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_SPI_IRQHandler+0x74>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 809e 	beq.w	8002960 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8098 	beq.w	8002960 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d023      	beq.n	8002882 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b03      	cmp	r3, #3
 8002844:	d011      	beq.n	800286a <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	f043 0204 	orr.w	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	e00b      	b.n	8002882 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
        return;
 8002880:	e06e      	b.n	8002960 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d014      	beq.n	80028b6 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d04f      	beq.n	800295e <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <HAL_SPI_IRQHandler+0x13a>
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d034      	beq.n	8002954 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0203 	bic.w	r2, r2, #3
 80028f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d011      	beq.n	8002926 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	4a18      	ldr	r2, [pc, #96]	@ (8002968 <HAL_SPI_IRQHandler+0x1b8>)
 8002908:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe ffae 	bl	8001870 <HAL_DMA_Abort_IT>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002932:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <HAL_SPI_IRQHandler+0x1b8>)
 8002934:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe ff98 	bl	8001870 <HAL_DMA_Abort_IT>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002952:	e003      	b.n	800295c <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f812 	bl	800297e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800295a:	e000      	b.n	800295e <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 800295c:	bf00      	nop
    return;
 800295e:	bf00      	nop
  }
}
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	08002a93 	.word	0x08002a93

0800296c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800299e:	f7fe fdb5 	bl	800150c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d03b      	beq.n	8002a2a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0220 	bic.w	r2, r2, #32
 80029c0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0202 	bic.w	r2, r2, #2
 80029d0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	2164      	movs	r1, #100	@ 0x64
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f000 f8f8 	bl	8002bcc <SPI_EndRxTxTransaction>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ffab 	bl	800297e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002a28:	e002      	b.n	8002a30 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7fe fa76 	bl	8000f1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff ff91 	bl	800296c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0203 	bic.w	r2, r2, #3
 8002a6e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff ff7a 	bl	800297e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff66 	bl	800297e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002acc:	f7fe fd1e 	bl	800150c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002adc:	f7fe fd16 	bl	800150c <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	0d1b      	lsrs	r3, r3, #20
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af2:	e054      	b.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d050      	beq.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002afc:	f7fe fd06 	bl	800150c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d902      	bls.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d13d      	bne.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b2a:	d111      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b34:	d004      	beq.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d107      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b58:	d10f      	bne.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e017      	b.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d19b      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000004 	.word	0x20000004

08002bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ff6a 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e000      	b.n	8002c00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e041      	b.n	8002c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fb40 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 fd18 	bl	800367c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d001      	beq.n	8002cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e032      	b.n	8002d26 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <HAL_TIM_Base_Start+0x88>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_TIM_Base_Start+0x48>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_Base_Start+0x48>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <HAL_TIM_Base_Start+0x8c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_Base_Start+0x48>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <HAL_TIM_Base_Start+0x90>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d111      	bne.n	8002d14 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d010      	beq.n	8002d24 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d12:	e007      	b.n	8002d24 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800

08002d3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <HAL_TIM_Base_Stop+0x38>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1a      	ldr	r2, [r3, #32]
 8002d5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_Base_Stop+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d001      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e03a      	b.n	8002e16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_TIM_Base_Start_IT+0x98>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x58>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dca:	d009      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x58>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a14      	ldr	r2, [pc, #80]	@ (8002e24 <HAL_TIM_Base_Start_IT+0x9c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x58>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a13      	ldr	r2, [pc, #76]	@ (8002e28 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d010      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e02:	e007      	b.n	8002e14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800

08002e2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e041      	b.n	8002ec2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe f9e8 	bl	8001228 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 fc06 	bl	800367c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_IC_Start_IT+0x1e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_IC_Start_IT+0x46>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_IC_Start_IT+0x2e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_IC_Start_IT+0x46>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_IC_Start_IT+0x3e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e003      	b.n	8002f12 <HAL_TIM_IC_Start_IT+0x46>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_TIM_IC_Start_IT+0x58>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e013      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d104      	bne.n	8002f34 <HAL_TIM_IC_Start_IT+0x68>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e00b      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d104      	bne.n	8002f44 <HAL_TIM_IC_Start_IT+0x78>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e003      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0b8      	b.n	80030d0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_IC_Start_IT+0xa2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6c:	e013      	b.n	8002f96 <HAL_TIM_IC_Start_IT+0xca>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_IC_Start_IT+0xb2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f7c:	e00b      	b.n	8002f96 <HAL_TIM_IC_Start_IT+0xca>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_IC_Start_IT+0xc2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f8c:	e003      	b.n	8002f96 <HAL_TIM_IC_Start_IT+0xca>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0xda>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x102>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0xea>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x102>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0xfa>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x102>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d841      	bhi.n	8003058 <HAL_TIM_IC_Start_IT+0x18c>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <HAL_TIM_IC_Start_IT+0x110>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003059 	.word	0x08003059
 8002fe4:	08003059 	.word	0x08003059
 8002fe8:	08003059 	.word	0x08003059
 8002fec:	08003023 	.word	0x08003023
 8002ff0:	08003059 	.word	0x08003059
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	08003059 	.word	0x08003059
 8002ffc:	08003035 	.word	0x08003035
 8003000:	08003059 	.word	0x08003059
 8003004:	08003059 	.word	0x08003059
 8003008:	08003059 	.word	0x08003059
 800300c:	08003047 	.word	0x08003047
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0202 	orr.w	r2, r2, #2
 800301e:	60da      	str	r2, [r3, #12]
      break;
 8003020:	e01d      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0204 	orr.w	r2, r2, #4
 8003030:	60da      	str	r2, [r3, #12]
      break;
 8003032:	e014      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	60da      	str	r2, [r3, #12]
      break;
 8003044:	e00b      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0210 	orr.w	r2, r2, #16
 8003054:	60da      	str	r2, [r3, #12]
      break;
 8003056:	e002      	b.n	800305e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      break;
 800305c:	bf00      	nop
  }

  if (status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d134      	bne.n	80030ce <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fd0a 	bl	8003a86 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <HAL_TIM_IC_Start_IT+0x20c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1ce>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003084:	d009      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1ce>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <HAL_TIM_IC_Start_IT+0x210>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1ce>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <HAL_TIM_IC_Start_IT+0x214>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800

080030e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0202 	mvn.w	r2, #2
 8003110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd ff0e 	bl	8000f48 <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa88 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa8e 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0204 	mvn.w	r2, #4
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fee4 	bl	8000f48 <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa5e 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa64 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd feba 	bl	8000f48 <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa34 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa3a 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2208      	movs	r2, #8
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd fe90 	bl	8000f48 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa0a 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fa10 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0201 	mvn.w	r2, #1
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fef6 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003272:	2b80      	cmp	r3, #128	@ 0x80
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b80      	cmp	r3, #128	@ 0x80
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fc85 	bl	8003b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9d4 	bl	8003668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0220 	mvn.w	r2, #32
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fc50 	bl	8003b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_TIM_IC_ConfigChannel+0x1e>
 800330e:	2302      	movs	r3, #2
 8003310:	e088      	b.n	8003424 <HAL_TIM_IC_ConfigChannel+0x130>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003330:	f000 fa06 	bl	8003740 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 020c 	bic.w	r2, r2, #12
 8003342:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	619a      	str	r2, [r3, #24]
 8003356:	e060      	b.n	800341a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d11c      	bne.n	8003398 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800336e:	f000 fa6f 	bl	8003850 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003380:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6999      	ldr	r1, [r3, #24]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	021a      	lsls	r2, r3, #8
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
 8003396:	e040      	b.n	800341a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d11b      	bne.n	80033d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80033ae:	f000 faba 	bl	8003926 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 020c 	bic.w	r2, r2, #12
 80033c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69d9      	ldr	r1, [r3, #28]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	61da      	str	r2, [r3, #28]
 80033d4:	e021      	b.n	800341a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d11c      	bne.n	8003416 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80033ec:	f000 fad6 	bl	800399c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69d9      	ldr	r1, [r3, #28]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	61da      	str	r2, [r3, #28]
 8003414:	e001      	b.n	800341a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_TIM_ConfigClockSource+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e0b4      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x186>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800346e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003480:	d03e      	beq.n	8003500 <HAL_TIM_ConfigClockSource+0xd4>
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003486:	f200 8087 	bhi.w	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348e:	f000 8086 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x172>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003496:	d87f      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b70      	cmp	r3, #112	@ 0x70
 800349a:	d01a      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0xa6>
 800349c:	2b70      	cmp	r3, #112	@ 0x70
 800349e:	d87b      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b60      	cmp	r3, #96	@ 0x60
 80034a2:	d050      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x11a>
 80034a4:	2b60      	cmp	r3, #96	@ 0x60
 80034a6:	d877      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b50      	cmp	r3, #80	@ 0x50
 80034aa:	d03c      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xfa>
 80034ac:	2b50      	cmp	r3, #80	@ 0x50
 80034ae:	d873      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d058      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x13a>
 80034b4:	2b40      	cmp	r3, #64	@ 0x40
 80034b6:	d86f      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b30      	cmp	r3, #48	@ 0x30
 80034ba:	d064      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034bc:	2b30      	cmp	r3, #48	@ 0x30
 80034be:	d86b      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d060      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d867      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05c      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d05a      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	e062      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034e2:	f000 fab1 	bl	8003a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	609a      	str	r2, [r3, #8]
      break;
 80034fe:	e04f      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	f000 fa9a 	bl	8003a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003522:	609a      	str	r2, [r3, #8]
      break;
 8003524:	e03c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003532:	461a      	mov	r2, r3
 8003534:	f000 f95e 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2150      	movs	r1, #80	@ 0x50
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fa68 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003544:	e02c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003552:	461a      	mov	r2, r3
 8003554:	f000 f9b8 	bl	80038c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2160      	movs	r1, #96	@ 0x60
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa58 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003564:	e01c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	461a      	mov	r2, r3
 8003574:	f000 f93e 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2140      	movs	r1, #64	@ 0x40
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fa48 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003584:	e00c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f000 fa3f 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003596:	e003      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e000      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800359e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d831      	bhi.n	8003634 <HAL_TIM_ReadCapturedValue+0x78>
 80035d0:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	08003635 	.word	0x08003635
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003635 	.word	0x08003635
 80035e8:	08003617 	.word	0x08003617
 80035ec:	08003635 	.word	0x08003635
 80035f0:	08003635 	.word	0x08003635
 80035f4:	08003635 	.word	0x08003635
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003635 	.word	0x08003635
 8003600:	08003635 	.word	0x08003635
 8003604:	08003635 	.word	0x08003635
 8003608:	0800362b 	.word	0x0800362b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	60fb      	str	r3, [r7, #12]

      break;
 8003614:	e00f      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	60fb      	str	r3, [r7, #12]

      break;
 800361e:	e00a      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	60fb      	str	r3, [r7, #12]

      break;
 8003628:	e005      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	60fb      	str	r3, [r7, #12]

      break;
 8003632:	e000      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003634:	bf00      	nop
  }

  return tmpreg;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop

08003644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
	...

0800367c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a29      	ldr	r2, [pc, #164]	@ (8003734 <TIM_Base_SetConfig+0xb8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x30>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x30>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <TIM_Base_SetConfig+0xbc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x30>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a25      	ldr	r2, [pc, #148]	@ (800373c <TIM_Base_SetConfig+0xc0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003734 <TIM_Base_SetConfig+0xb8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00b      	beq.n	80036de <TIM_Base_SetConfig+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d007      	beq.n	80036de <TIM_Base_SetConfig+0x62>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <TIM_Base_SetConfig+0xbc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_Base_SetConfig+0x62>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a18      	ldr	r2, [pc, #96]	@ (800373c <TIM_Base_SetConfig+0xc0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a07      	ldr	r2, [pc, #28]	@ (8003734 <TIM_Base_SetConfig+0xb8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d103      	bne.n	8003724 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	615a      	str	r2, [r3, #20]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800

08003740 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0201 	bic.w	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a1f      	ldr	r2, [pc, #124]	@ (80037e8 <TIM_TI1_SetConfig+0xa8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_TI1_SetConfig+0x46>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003774:	d007      	beq.n	8003786 <TIM_TI1_SetConfig+0x46>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a1c      	ldr	r2, [pc, #112]	@ (80037ec <TIM_TI1_SetConfig+0xac>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_TI1_SetConfig+0x46>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4a1b      	ldr	r2, [pc, #108]	@ (80037f0 <TIM_TI1_SetConfig+0xb0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <TIM_TI1_SetConfig+0x4a>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <TIM_TI1_SetConfig+0x4c>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e003      	b.n	80037aa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f023 030a 	bic.w	r3, r3, #10
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f003 030a 	and.w	r3, r3, #10
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800

080037f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800381e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 030a 	bic.w	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f023 0210 	bic.w	r2, r3, #16
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800388e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	031b      	lsls	r3, r3, #12
 8003894:	b29b      	uxth	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	b2db      	uxtb	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003976:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f043 0307 	orr.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	609a      	str	r2, [r3, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	609a      	str	r2, [r3, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2201      	movs	r2, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1a      	ldr	r2, [r3, #32]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e046      	b.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b34:	d009      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10c      	bne.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800

08003b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e042      	b.n	8003c48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fbbc 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	@ 0x24
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fc7f 	bl	80044f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b0ba      	sub	sp, #232	@ 0xe8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x66>
 8003ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fb63 	bl	800437a <UART_Receive_IT>
      return;
 8003cb4:	e25b      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80de 	beq.w	8003e7c <HAL_UART_IRQHandler+0x22c>
 8003cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80d1 	beq.w	8003e7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0xae>
 8003ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_UART_IRQHandler+0xd2>
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_UART_IRQHandler+0xf6>
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f043 0204 	orr.w	r2, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_UART_IRQHandler+0x126>
 8003d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 81f2 	beq.w	8004164 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_UART_IRQHandler+0x14e>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 faee 	bl	800437a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_UART_IRQHandler+0x17a>
 8003dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04f      	beq.n	8003e6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9f8 	bl	80041c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d041      	beq.n	8003e62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1d9      	bne.n	8003dde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	4a7e      	ldr	r2, [pc, #504]	@ (8004030 <HAL_UART_IRQHandler+0x3e0>)
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd fd16 	bl	8001870 <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e00e      	b.n	8003e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f99c 	bl	8004198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	e00a      	b.n	8003e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f998 	bl	8004198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	e006      	b.n	8003e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f994 	bl	8004198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e76:	e175      	b.n	8004164 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	bf00      	nop
    return;
 8003e7a:	e173      	b.n	8004164 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 814f 	bne.w	8004124 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8148 	beq.w	8004124 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8141 	beq.w	8004124 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80b6 	beq.w	8004034 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8145 	beq.w	8004168 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	f080 813e 	bcs.w	8004168 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	f000 8088 	beq.w	8004010 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f2c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1d9      	bne.n	8003f00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3314      	adds	r3, #20
 8003f52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e1      	bne.n	8003f4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e3      	bne.n	8003f88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fe0:	f023 0310 	bic.w	r3, r3, #16
 8003fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ff2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ff4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e3      	bne.n	8003fce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd fbf5 	bl	80017fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800401e:	b29b      	uxth	r3, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	b29b      	uxth	r3, r3
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8bf 	bl	80041aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800402c:	e09c      	b.n	8004168 <HAL_UART_IRQHandler+0x518>
 800402e:	bf00      	nop
 8004030:	08004285 	.word	0x08004285
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800403c:	b29b      	uxth	r3, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 808e 	beq.w	800416c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8089 	beq.w	800416c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800406a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004070:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800407e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004080:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e3      	bne.n	800405a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	623b      	str	r3, [r7, #32]
   return(result);
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69b9      	ldr	r1, [r7, #24]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	617b      	str	r3, [r7, #20]
   return(result);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e3      	bne.n	80040d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f844 	bl	80041aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004122:	e023      	b.n	800416c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_UART_IRQHandler+0x4f4>
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f8b5 	bl	80042ac <UART_Transmit_IT>
    return;
 8004142:	e014      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <HAL_UART_IRQHandler+0x51e>
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f8f4 	bl	800434a <UART_EndTransmit_IT>
    return;
 8004162:	e004      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
    return;
 8004164:	bf00      	nop
 8004166:	e002      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
      return;
 8004168:	bf00      	nop
 800416a:	e000      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
      return;
 800416c:	bf00      	nop
  }
}
 800416e:	37e8      	adds	r7, #232	@ 0xe8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b095      	sub	sp, #84	@ 0x54
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	61fb      	str	r3, [r7, #28]
   return(result);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	d119      	bne.n	800426c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	60bb      	str	r3, [r7, #8]
   return(result);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0310 	bic.w	r3, r3, #16
 800424e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004258:	61ba      	str	r2, [r7, #24]
 800425a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	613b      	str	r3, [r7, #16]
   return(result);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e5      	bne.n	8004238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800427a:	bf00      	nop
 800427c:	3754      	adds	r7, #84	@ 0x54
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff7a 	bl	8004198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b21      	cmp	r3, #33	@ 0x21
 80042be:	d13e      	bne.n	800433e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c8:	d114      	bne.n	80042f4 <UART_Transmit_IT+0x48>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d110      	bne.n	80042f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	1c9a      	adds	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]
 80042f2:	e008      	b.n	8004306 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	1c59      	adds	r1, r3, #1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6211      	str	r1, [r2, #32]
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29b      	uxth	r3, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4619      	mov	r1, r3
 8004314:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004328:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004338:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff02 	bl	8004174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b08c      	sub	sp, #48	@ 0x30
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b22      	cmp	r3, #34	@ 0x22
 800438c:	f040 80ae 	bne.w	80044ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004398:	d117      	bne.n	80043ca <UART_Receive_IT+0x50>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	1c9a      	adds	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80043c8:	e026      	b.n	8004418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043dc:	d007      	beq.n	80043ee <UART_Receive_IT+0x74>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <UART_Receive_IT+0x82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e008      	b.n	800440e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004408:	b2da      	uxtb	r2, r3
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004428:	2b00      	cmp	r3, #0
 800442a:	d15d      	bne.n	80044e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0220 	bic.w	r2, r2, #32
 800443a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800444a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	2b01      	cmp	r3, #1
 8004470:	d135      	bne.n	80044de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	613b      	str	r3, [r7, #16]
   return(result);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f023 0310 	bic.w	r3, r3, #16
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	623a      	str	r2, [r7, #32]
 800449a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	69f9      	ldr	r1, [r7, #28]
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d10a      	bne.n	80044d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fe67 	bl	80041aa <HAL_UARTEx_RxEventCallback>
 80044dc:	e002      	b.n	80044e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fe51 	bl	8004186 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e002      	b.n	80044ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3730      	adds	r7, #48	@ 0x30
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004532:	f023 030c 	bic.w	r3, r3, #12
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	430b      	orrs	r3, r1
 800453e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <UART_SetConfig+0x114>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fd ffbe 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	e002      	b.n	800456e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7fd ffa6 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 800456c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009a      	lsls	r2, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	4a22      	ldr	r2, [pc, #136]	@ (8004610 <UART_SetConfig+0x118>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	0119      	lsls	r1, r3, #4
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <UART_SetConfig+0x118>)
 80045a6:	fba3 0302 	umull	r0, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2064      	movs	r0, #100	@ 0x64
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	@ 0x32
 80045b8:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <UART_SetConfig+0x118>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045c4:	4419      	add	r1, r3
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009a      	lsls	r2, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <UART_SetConfig+0x118>)
 80045de:	fba3 0302 	umull	r0, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2064      	movs	r0, #100	@ 0x64
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	@ 0x32
 80045f0:	4a07      	ldr	r2, [pc, #28]	@ (8004610 <UART_SetConfig+0x118>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 020f 	and.w	r2, r3, #15
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	440a      	add	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40013800 	.word	0x40013800
 8004610:	51eb851f 	.word	0x51eb851f

08004614 <memset>:
 8004614:	4603      	mov	r3, r0
 8004616:	4402      	add	r2, r0
 8004618:	4293      	cmp	r3, r2
 800461a:	d100      	bne.n	800461e <memset+0xa>
 800461c:	4770      	bx	lr
 800461e:	f803 1b01 	strb.w	r1, [r3], #1
 8004622:	e7f9      	b.n	8004618 <memset+0x4>

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	2600      	movs	r6, #0
 8004628:	4d0c      	ldr	r5, [pc, #48]	@ (800465c <__libc_init_array+0x38>)
 800462a:	4c0d      	ldr	r4, [pc, #52]	@ (8004660 <__libc_init_array+0x3c>)
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	42a6      	cmp	r6, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	f000 f81a 	bl	800466c <_init>
 8004638:	2600      	movs	r6, #0
 800463a:	4d0a      	ldr	r5, [pc, #40]	@ (8004664 <__libc_init_array+0x40>)
 800463c:	4c0a      	ldr	r4, [pc, #40]	@ (8004668 <__libc_init_array+0x44>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	42a6      	cmp	r6, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f855 3b04 	ldr.w	r3, [r5], #4
 800464c:	4798      	blx	r3
 800464e:	3601      	adds	r6, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f855 3b04 	ldr.w	r3, [r5], #4
 8004656:	4798      	blx	r3
 8004658:	3601      	adds	r6, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	080046c8 	.word	0x080046c8
 8004660:	080046c8 	.word	0x080046c8
 8004664:	080046c8 	.word	0x080046c8
 8004668:	080046cc 	.word	0x080046cc

0800466c <_init>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	bf00      	nop
 8004670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004672:	bc08      	pop	{r3}
 8004674:	469e      	mov	lr, r3
 8004676:	4770      	bx	lr

08004678 <_fini>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	bf00      	nop
 800467c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467e:	bc08      	pop	{r3}
 8004680:	469e      	mov	lr, r3
 8004682:	4770      	bx	lr
